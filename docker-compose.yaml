version: '3.8'

services:

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  zookeeper:
    image: zookeeper
    restart: always
    hostname: zoo1
    ports:
      - 2181:2181

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  primary_db:
    image: postgres
    restart: always
    container_name: fastr-database-master
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    user: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 1s
      retries: 5

  replica_db:
    image: postgres
    restart: always
    container_name: fastr-database-slave
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD_REPLICA}
      POSTGRES_USER: ${DB_USER_REPLICA}
      POSTGRES_DB: DB_NAME_REPLICA
      POSTGRES_PRIMARY_SERVICE: primary_db
      POSTGRES_PRIMARY_PORT: ${DB_PORT}
      POSTGRES_REPLICATION_MODE: 'slave'
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    ports:
      - "5433:5432"

  authentication:
    build:
      context: .
      dockerfile: ./authentication/Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./authentication:/authentication
    ports:
      - "8000:8000"
    depends_on:
      - primary_db

volumes:
  redis_data: